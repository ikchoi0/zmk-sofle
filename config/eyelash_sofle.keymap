#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <40 50>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <17 16>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 22>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <30 29>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <34 35>;
        };

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <42 43>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <47 48>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1     &kp N2        &kp N3        &kp N4  &kp N5       &kp UP_ARROW     &kp N6   &kp N7  &kp N8         &kp N9      &kp N0    &kp BACKSPACE
&kp TAB     &kp Q      &kp W         &kp E         &kp R   &kp T        &kp DOWN_ARROW   &kp Y    &kp U   &kp I          &kp O       &kp P     &kp BSLH
&kp F18     &kp A      &kp S         &kp D         &kp F   &kp G        &kp LEFT_ARROW   &kp H    &kp J   &kp K          &kp L       &kp SEMI  &kp APOS
&kp LSHFT   &kp Z      &kp X         &kp C         &kp V   &kp B        &kp RIGHT_ARROW  &kp N    &kp M   &kp COMMA      &kp DOT     &kp FSLH  &kp RIGHT_SHIFT
&kp C_MUTE  &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &mo 2   &kp SPACE    &kp ENTER        &kp RET  &mo 1   &kp BACKSPACE  &kp DELETE  &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE       &kp F1     &kp F2          &kp F3          &kp F4           &kp F5       &mmv MOVE_UP     &kp F6     &kp F7    &kp F8    &kp F9     &kp F10  &kp F11
&kp TILDE       &trans     &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &mkp MB4     &mmv MOVE_DOWN   &kp PG_UP  &kp HOME  &kp UP    &kp END    &trans   &kp F12
&kt CAPSLOCK    &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB5     &mmv MOVE_LEFT   &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans   &trans
&kp LEFT_SHIFT  &trans     &trans          &trans          &trans           &trans       &mmv MOVE_RIGHT  &trans     &trans    &trans    &trans     &trans   &trans
&kp C_MUTE      &kp LCTRL  &kp LALT        &kp LGUI        &trans           &kp SPACE    &mkp LCLK        &kp ENTER  &trans    &trans    &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT    &mmv MOVE_UP     &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PLUS
&trans     &trans    &trans  &trans    &trans      &trans         &mmv MOVE_DOWN   &trans     &trans         &trans        &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp MINUS
&trans     &trans    &trans  &trans    &trans      &trans         &mmv MOVE_LEFT   &trans     &trans         &trans        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp UNDER
&trans     &trans    &trans  &trans    &trans      &trans         &mmv MOVE_RIGHT  &trans     &trans         &trans        &kp LESS_THAN         &kp GREATER_THAN       &kp KP_EQUAL
&trans     &trans    &trans  &trans    &trans      &trans         &mkp LCLK        &trans     &trans         &trans        &trans                &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &rgb_ug RGB_ON   &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &rgb_ug RGB_OFF  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans           &trans           &trans           &trans           &trans           &trans
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans           &trans           &sys_reset       &soft_off        &bootloader      &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans           &trans           &trans           &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
